# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10Agh4_UxzMCENKJM4urWO2UPbdXlbgu9
"""

# -*- coding: utf-8 -*-
"""Análisis matemático de la evolución de las tarifas eléctricas en Colombia"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import minimize
from scipy.integrate import odeint
from sklearn.linear_model import LinearRegression

# --- Datos ficticios (reemplaza con tus datos reales) ---
# Variables: costo_produccion (P), perdidas_tecnicas (L), margen_comercializacion (M), tarifa_final (T)
P = np.array([100, 120, 130, 150, 170, 180, 200, 220])    # Costo de producción (en miles COP)
L = np.array([5, 7, 8, 10, 12, 13, 15, 17])               # Pérdidas técnicas (%)
M = np.array([15, 17, 20, 22, 25, 27, 30, 32])            # Margen comercialización (%)
T = np.array([140, 160, 180, 210, 240, 260, 290, 320])    # Tarifa final (COP/kWh)

# --- 1. Modelo de Regresión Múltiple ---
X = np.column_stack((P, L, M))
reg = LinearRegression().fit(X, T)
print("Coeficientes de regresión:", reg.coef_)
print("Intercepto:", reg.intercept_)
print("R^2:", reg.score(X, T))

# Predicción para graficar
T_pred = reg.predict(X)

plt.scatter(T, T_pred, color='blue')
plt.plot([min(T), max(T)], [min(T), max(T)], 'r--')
plt.xlabel('Tarifa real')
plt.ylabel('Tarifa predicha')
plt.title('Regresión Múltiple: Tarifa real vs. predicha')
plt.show()

# --- 2. Optimización de Costos ---
# Función costo = tarifa(consumo) * consumo
# Supongamos tarifa escalonada: tarifa = base + tarifa_extra si consumo > umbral

def tarifa_consumo(x):
    base = 150
    umbral = 150
    tarifa_extra = 0.5
    return base + tarifa_extra * max(0, x - umbral)

def costo(x):
    return tarifa_consumo(x) * x

# Restricciones consumo mínimo y máximo
bounds = [(50, 300)]

resultado = minimize(costo, x0=[100], bounds=bounds)
print("Consumo óptimo (kWh):", resultado.x[0])
print("Costo mínimo (COP):", resultado.fun)

# Graficar costo vs consumo
consumos = np.linspace(50, 300, 100)
costos = [costo(c) for c in consumos]

plt.plot(consumos, costos)
plt.scatter(resultado.x[0], resultado.fun, color='red', label='Consumo óptimo')
plt.xlabel('Consumo (kWh)')
plt.ylabel('Costo (COP)')
plt.title('Optimización de Costos')
plt.legend()
plt.show()

# --- 3. Modelo Dinámico con Ecuaciones Diferenciales ---
def modelo_dinamico(T, t, alpha, beta, gamma, delta):
    D = 10 + 0.5 * t       # Demanda creciente
    S = 5                  # Subsidio constante
    I = 0.02               # Inflación constante
    dTdt = alpha * D + beta * S + gamma * I - delta * T
    return dTdt

# Parámetros
alpha = 0.3
beta = -0.2
gamma = 50
delta = 0.1

t = np.linspace(0, 50, 200)
T0 = 150  # Tarifa inicial

T_sol = odeint(modelo_dinamico, T0, t, args=(alpha, beta, gamma, delta))

# T_sol es una matriz de forma (len(t), 1), así que accedemos a la primera columna
plt.plot(t, T_sol[:, 0])
plt.xlabel('Tiempo (meses)')
plt.ylabel('Tarifa (COP/kWh)')
plt.title('Evolución de la tarifa con modelo dinámico')
plt.grid(True)
plt.show()